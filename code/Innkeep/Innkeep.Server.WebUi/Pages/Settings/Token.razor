@page "/Settings/Token"
@using Innkeep.Core.Interfaces
@using Innkeep.Core.DomainModels.Authentication
@using Innkeep.Server.Pretix.Interfaces

@inject IAuthenticationService AuthenticationService
@inject IPretixRepository PretixRepository
@inject ISnackbar Snackbar

<h3>Set the Pretix Token here</h3>

<div>
    <div class="d-flex flex-column gap-4">
        <MudTextField 
            @bind-Value="_authenticationInfo.PretixToken" 
            Label="Token" 
            Variant="Variant.Outlined" 
            InputType="@_tokenInput" 
            Adornment="Adornment.End" 
            AdornmentIcon="@_tokenInputIcon" 
            OnAdornmentClick="ToggleTokenVisibility" 
            AdornmentAriaLabel="Show Token"></MudTextField>
        <div class="d-flex flex-row justify-end gap-1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Test">Test Connection</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Save">Save Changes</MudButton>
        </div>
    </div>
</div>

@code {

    private AuthenticationInfo _authenticationInfo;

    private bool _showToken = false;
    
    private InputType _tokenInput = InputType.Password;
    private string _tokenInputIcon = Icons.Material.Filled.VisibilityOff;

    private void ToggleTokenVisibility()
    {
        if (_showToken)
        {
            _showToken = false;
            _tokenInputIcon = Icons.Material.Filled.VisibilityOff;
            _tokenInput = InputType.Password;
        }

        _showToken = true;
        _tokenInputIcon = Icons.Material.Filled.Visibility;
        _tokenInput = InputType.Text;
    }

    private async void Test()
    {
        try
        {
            await PretixRepository.GetOrganizers();
            AuthenticationService.AuthenticationSuccessful = true;
            Snackbar.Add("Authentication Successful", Severity.Success);
        }
        catch
        {
            AuthenticationService.AuthenticationSuccessful = false;
            Snackbar.Add("Authentication Failed, please check your token.", Severity.Error);
        }
        
    }

    private void Save()
    {
        AuthenticationService.SaveAuthentication();
        AuthenticationService.ReadAuthentication();
        Snackbar.Add("Token Saved");
        Test();
        InvokeAsync(StateHasChanged);
    }
    
    protected override void OnInitialized()
    {
        _authenticationInfo = AuthenticationService.AuthenticationInfo;
        if (!AuthenticationService.AuthenticationSuccessful) Snackbar.Add("Your Token is invalid. Please set a valid token.", Severity.Error);
        InvokeAsync(StateHasChanged);
    }

}