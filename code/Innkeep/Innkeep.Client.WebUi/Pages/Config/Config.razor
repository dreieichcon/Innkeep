@page "/Config"
@using Innkeep.Client.Interfaces.Services
@using System.IO.Ports
@inject IClientSettingsService ClientSettingsService
@inject IClientServerConnectionService ServerConnectionService
@inject ISerialPortRepository SerialPortRepository
@inject IPrintService PrintService
@inject ISnackbar Snackbar

<div class="d-flex flex-column justify-content-center align-content-center gap-4 flex-grow-1">
    <h3>Edit Client Settings</h3>
    <div class="d-flex flex-row gap-2 flex-grow-1">
        <MudItem>
            <MudTextField Label="Server URI" @bind-Value="EditableUri"></MudTextField>
        </MudItem>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="AutoDiscoverUri">Auto Discover</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="TestConnection">Test Connection</MudButton>
    </div>
    <div class="d-flex flex-row gap-2 flex-grow-1">
        <MudSelect Label="Select Printer COM" Variant="Variant.Outlined" @bind-Value="ClientSettingsService.Setting.PrinterComPort">
            @foreach (var port in Ports)
            {
                <MudSelectItem Value="@port"/>
            } 
        </MudSelect>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="TestPrinter">Test Printer</MudButton>
    </div>
    <div class="d-flex flex-row gap-2 flex-grow-1">
        <MudSelect Label="Select Reader COM" Variant="Variant.Outlined" @bind-Value="ClientSettingsService.Setting.CardReaderComPort">
            @foreach (var port in Ports)
            {
                <MudSelectItem Value="@port"/>
            } 
        </MudSelect>
    </div>
    <div class="d-flex flex-row gap-2 align-content-end flex-grow-1">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" @onclick="Save">Save Settings</MudButton>
    </div>
</div>

@code {

    private List<string> Ports { get; set; }
    
    private string EditableUri
    {
        get => ClientSettingsService.Setting.ServerUri.ToString();
        set => ClientSettingsService.Setting.ServerUri = new Uri(value);
    }

    private void TestConnection()
    {
        if (ServerConnectionService.TestConnection()) Snackbar.Add("Connection Successful", Severity.Success);
        else Snackbar.Add("Connection Failed, please check your URI or the Server.", Severity.Error);
    }

    private void AutoDiscoverUri()
    {
        if (ServerConnectionService.AutoDiscover(out var uri))
        {
            if (uri is not null) EditableUri = uri.ToString();
            Snackbar.Add("Server Discovered", Severity.Success);
        } 
        else Snackbar.Add("Could not find a server on the network.", Severity.Error);
    }

    private void TestPrinter()
    {
        Snackbar.Add("Sending Test Page To Printer", Severity.Info);
        PrintService.TestPage();
    }

    private void Save()
    {
        ClientSettingsService.Save();
        Snackbar.Add("Settings Saved", Severity.Success);
    }
    
    protected override void OnInitialized()
    {
        Ports = SerialPortRepository.GetPorts();
        base.OnInitialized();
    }

}