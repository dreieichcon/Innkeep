@page "/Scan"
@using Serilog
@using Innkeep.Client.Services.Interfaces.Server
@using Innkeep.Client.Services.Interfaces.Pretix
@using System.Text.Json
@inject IClientServerConnectionService ConnectionService
@inject IClientPretixService ClientPretixService

<MudContainer MaxWidth="MaxWidth.Medium" Class="h-100">
    <MudStack Class="w-100 h-100" Justify="Justify.Center">
        <MudPaper Class="p-3">
            <MudStack>
                <MudText>Checking in against List: @ClientPretixService.CheckinLists.FirstOrDefault(x => x.Id == ClientPretixService.SelectedCheckinList)?.Name</MudText>
                <MudFocusTrap>
                    <MudTextField @bind-Value="CheckInCode" Variant="Variant.Outlined" Label="Check In Code" @onkeydown="@Enter" TextUpdateSuppression="false"></MudTextField>
                </MudFocusTrap>
            </MudStack>
        </MudPaper>
        <MudPaper Class="p-3 h-50">
            <MudStack>
                <MudText Typo="Typo.h5">Status</MudText>
                <MudDivider Class="flex-grow-0"></MudDivider>
                <TicketInformation @ref="_ticket"/>
                <ErrorDisplay @ref="_error"/>
                <SuccessDisplay @ref="_success"/>
            </MudStack>
        </MudPaper>
    </MudStack>
</MudContainer>

@code {

    public string CheckInCode { get; set; } = string.Empty;

    public string TicketType { get; set; } = string.Empty;

    public ErrorDisplay _error = null!;

    public TicketInformation _ticket = null!;

    public SuccessDisplay _success = null!;

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code != "ArrowDown") return;

        var result = await ConnectionService.SendCheckIn(new PretixCheckin()
        {
            Type = "entry",
            Secret = CheckInCode,
            Force = false,
            SourceType = "barcode",
            Lists = new[]
            {
                ClientPretixService.SelectedCheckinList
            }
        });
        
        var ticketType = ClientPretixService.SalesItems.FirstOrDefault(x => x.Id == result.Position.Item);
        TicketType = ticketType?.Name.German ?? string.Empty;

        await ShowResponse(result);
        
        await _ticket.ShowInfo(TicketType);
        
        Log.Debug(JsonSerializer.Serialize(result));

        await Task.Delay(100);

        ClearCode();
        
    }

    private async Task ShowResponse(PretixCheckinResponse response)
    {
        switch (response.Status)
        {
            case "error":
                await _error.ShowError(response);
                break;
                
            case "ok":
                await _success.ShowSuccess(response);
                break;
        }
    }

    private void ClearCode()
    {
        CheckInCode = string.Empty;
        TicketType = string.Empty;
        InvokeAsync(StateHasChanged);
    }

}