@using Innkeep.Client.WebUi.Pages.POS.Components
@using System.Runtime.CompilerServices
@using Innkeep.Client.Interfaces.Services

@inject ITransactionService TransactionService

<div class="keypad-wrapper drop2">
    <div class="keypad-title">
        <div>
            Amount:
        </div>
        <div class="@Confirmed">
            @Amount &nbsp; @TransactionService.Currency
        </div>
    </div>
    <div class="keypad-group">
        <div class="keypad-row">
            <KeypadButton Value="7" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="8" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="9" CommitAction="(val) => Add(val)"/>
        </div>
        <div class="keypad-row">
            <KeypadButton Value="4" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="5" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="6" CommitAction="(val) => Add(val)"/>
        </div>
        <div class="keypad-row">
            <KeypadButton Value="1" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="2" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="3" CommitAction="(val) => Add(val)"/>
        </div>
        <div class="keypad-row">
            <KeypadButton Value="0" CommitAction="(val) => Add(val)"/>
            <KeypadButton Value="," CommitAction="(val) => Add(val)"/>
        </div>
        <div class="keypad-row">
            <div class="keypad-button ok" @onclick="CommitAmount">
                Commit
            </div>
            <div class="keypad-button cancel" @onclick="ClearAmount">
                Clear
            </div>
        </div>
    </div>
</div>

@code {
    
    private string Confirmed => IsConfirmed ? "amount-confirmed" : "";

    private bool IsConfirmed { get; set; }

    private bool CommaAdded => Amount.Contains(",");

    private bool DecimalsMaxed => CommaAdded && Amount.Split(",")[1].Length == 2;

    private string Amount { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
       // AmountKeypadService.AmountChanged += StateChangedEvent;
    }

    private void Add(string value)
    {
        if (value == "," && CommaAdded) return;
        if (DecimalsMaxed) return;
        Amount += value;
        StateChangedEvent(null, EventArgs.Empty);
    }

    private void StateChangedEvent(object? sender, EventArgs e)
    {
        _ = InvokeAsync(StateHasChanged);
    }

    private void CommitAmount()
    {
        if (decimal.TryParse(Amount, out var amount))
        {
            TransactionService.UpdateGivenAmount(amount);
        }
        ClearAmount();
        StateChangedEvent(null, EventArgs.Empty);
    }

    private void ClearAmount()
    {
        Amount = string.Empty;
        StateChangedEvent(null, EventArgs.Empty);
    }

}