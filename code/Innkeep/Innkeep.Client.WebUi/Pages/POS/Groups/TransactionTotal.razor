@using Innkeep.DI.Services
@using Innkeep.Client.Interfaces.Services
@using Innkeep.Client.Services.Interfaces.Transaction
@inject IShoppingCartService ShoppingCartService;
@inject ITransactionService TransactionService;

<div class="cart-total-wrapper drop2">
   <div class="item-row">
      <div class="cart-total">
         Total
      </div>
      <div class="cart-total">
         @Total&nbsp;@TransactionService.Currency
      </div>
   </div>
   <div class="item-row">
      <div class="cart-tax">
         Given
      </div>
      <div class="cart-tax">
         @Given&nbsp;@TransactionService.Currency
      </div>
   </div>
   <div class="item-row">
      <div class="cart-total">
         Remaining
      </div>
      <div class="cart-total">
         @Remaining&nbsp;@TransactionService.Currency
      </div>
   </div>
</div>

@code {

   protected override void OnInitialized()
   {
      TransactionService.TransactionUpdated += StateChangedEvent;
   }

   private void StateChangedEvent(object? sender, EventArgs e)
   {
      _ = InvokeAsync(StateHasChanged);
   }

   private decimal Total => TransactionService.AmountDue;

   private decimal Remaining => TransactionService.AmountDue - TransactionService.AmountGiven;

   private decimal Given => TransactionService.AmountGiven;

}