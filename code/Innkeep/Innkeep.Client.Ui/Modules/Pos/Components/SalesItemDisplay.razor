@using Innkeep.Api.Models.Internal
@using Innkeep.Services.Client.Interfaces.Pos
@inject ISalesItemService SalesItemService;
@inject IClientPosService ClientPosService;

<MudPaper Style="@PosStyles.DisplayStyle"
          Class="d-flex flex-grow-1 mh-100 overflow-hidden border-1 mud-border-primary" Elevation="1">
    <ListBox Title="@ItemDisplayText">
        <MudStack Class="flex-grow-1 mh-100 m-0" Style="overflow-x: scroll;" Justify="Justify.FlexStart" Spacing="0">
            @foreach (var item in SalesItemService.SalesItems)
            {
                <SalesItem Item="@item" OnClickCallback="() => AddToCart(item)"/>

                <MudDivider Style="width: 100%; height: 2px !important; max-height: 2px;"/>
            }
        </MudStack>
    </ListBox>
</MudPaper>

@code {

    protected override async Task OnInitializedAsync()
    {
        SalesItemService.ItemsUpdated += async (_, _) => await InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private string ItemDisplayText => $"Items - {SalesItemService.LastUpdated?.ToString("HH:mm") ?? "Not Loaded"}";

    private void AddToCart(DtoSalesItem item)
    {
        if (CanAddToCart(item))
            ClientPosService.AddToCart(item);
    }

    private bool CanAddToCart(DtoSalesItem item)
    {
        if (item.Infinite)
            return true;

        var countInCart = ClientPosService.CartItems.FirstOrDefault(x => x.Id == item.Id)
            ?.CartCount ?? 0;

        return !item.SoldOut && countInCart < item.QuotaLeft;
    }

}