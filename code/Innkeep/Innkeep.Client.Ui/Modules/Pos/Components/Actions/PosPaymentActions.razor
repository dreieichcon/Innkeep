@using Innkeep.Db.Client.Models
@using Innkeep.Services.Client.Interfaces.Hardware
@using Innkeep.Services.Client.Interfaces.Pos
@using Innkeep.Services.Interfaces
@inject IClientPosService ClientPosService;
@inject IDbService<ClientConfig> ClientConfigService;
@inject IPrinterService PrinterService;

<MudPaper Style="@PosStyles.DisplayStyleDouble" Class="d-flex flex-grow-1 mh-100 overflow-hidden" Elevation="0">
    <MudStack Row="true" Class="flex-grow-1">
        <MudButton
            Style="@PosStyles.DisplayStyle"
            Color="Color.Success"
            Variant="Variant.Filled"
            @onclick="@Commit"
            Disabled="@CommitDisabled">
            <MudText Typo="Typo.h4">
                CONFIRM
            </MudText>
        </MudButton>
        <MudButton
            Style="@PosStyles.DisplayStyle"
            Color="Color.Error"
            Variant="Variant.Filled"
            @onclick="@ClientPosService.ClearMoneyGiven">
            <MudText Typo="Typo.h4">
                CLEAR AMOUNT
            </MudText>
        </MudButton>
        <MudButton
            Style="@PosStyles.DisplayStyle"
            Color="Color.Error"
            Variant="Variant.Filled"
            @onclick="@ClientPosService.CancelTransaction">
            <MudText Typo="Typo.h4">
                CANCEL
            </MudText>
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    
    protected override void OnInitialized()
    {
        ClientPosService.MoneyUpdated += async (_, _) => await InvokeAsync(StateHasChanged);
    }

    private bool CommitDisabled => ClientPosService.MoneyGiven < ClientPosService.MoneyRequired;

    private async Task Commit()
    {
        var result = await ClientPosService.CommitTransaction();

        if (result is not null)
        {
            var printer = ClientConfigService.CurrentItem!.PrinterName;
            PrinterService.PrintReceipt(printer, result);
        }
    }
}