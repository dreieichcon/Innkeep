@using Innkeep.Api.Models.Internal.Transaction
@using Innkeep.Client.Ui.Modules.Pos.Components.Dialog
@using Innkeep.Db.Client.Models
@using Innkeep.Services.Client.Interfaces.Hardware
@using Innkeep.Services.Client.Interfaces.Pos
@using Innkeep.Services.Interfaces
@inject IClientPosService ClientPosService;
@inject IDbService<ClientConfig> ClientConfigService;
@inject IPrinterService PrinterService;
@inject IDialogService DialogService;
@inject ISalesItemService SalesItemService;

<MudPaper Style="@PosStyles.DisplayStyleDouble" Class="d-flex flex-grow-1 mh-100 overflow-hidden border-1 mud-border-primary" Elevation="0">
    <MudStack Row="true" Class="flex-grow-1">
        <MudButton
            Style="@PosStyles.DisplayStyle"
            Color="Color.Success"
            Variant="Variant.Filled"
            @onclick="@Commit"
            Disabled="@CommitDisabled">
            <MudText Typo="Typo.h4">
                CONFIRM
            </MudText>
        </MudButton>
        <MudButton
            Style="@PosStyles.DisplayStyle"
            Color="Color.Error"
            Variant="Variant.Filled"
            @onclick="@ClientPosService.ClearMoneyGiven">
            <MudText Typo="Typo.h4">
                CLEAR AMOUNT
            </MudText>
        </MudButton>
        <MudButton
            Style="@PosStyles.DisplayStyle"
            Color="Color.Error"
            Variant="Variant.Filled"
            @onclick="@ClientPosService.CancelTransaction">
            <MudText Typo="Typo.h4">
                CANCEL
            </MudText>
        </MudButton>
    </MudStack>
</MudPaper>

<style>
    .backdrop-blur {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    
    protected override void OnInitialized()
    {
        ClientPosService.MoneyUpdated += async (_, _) => await InvokeAsync(StateHasChanged);
    }

    private bool CommitDisabled => ClientPosService.MoneyGiven < ClientPosService.MoneyRequired;

    private async Task Commit()
    {
        var result = await ClientPosService.CommitTransaction();
        
        if (result is not null)
        {
            var printer = ClientConfigService.CurrentItem!.PrinterName;
            PrinterService.OpenDrawer(printer);
            
            await SalesItemService.Load();
            
            var parameters = new DialogParameters<TransactionCompleteDialog>()
            {
                {
                    x => x.Receipt, result
                },
            };

            var options = new DialogOptions()
            {
                FullWidth = true, MaxWidth = MaxWidth.Medium,
                BackgroundClass = "backdrop-blur",
            };
            
            if (result.ReceiptVouchers.Any())
                PrintReceipt(result);

            var dialog = await DialogService.ShowAsync<TransactionCompleteDialog>("", parameters, options);
            var dialogResult = await dialog.Result;

            if (!dialogResult.Canceled && result.ReceiptVouchers.Count == 0)
            {
                PrintReceipt(result);
            }
                
            ClearTransaction();
        }
    }

    private void PrintReceipt(TransactionReceipt result)
    {
        var printer = ClientConfigService.CurrentItem!.PrinterName;
        PrinterService.PrintReceipt(printer, result);
    }

    private void ClearTransaction()
    {
        ClientPosService.ClearCart();
        ClientPosService.ClearMoneyGiven();
        ClientPosService.CancelTransaction();
    }
}