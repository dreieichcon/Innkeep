@page "/POS"
@using Innkeep.Services.Client.Interfaces.Pos
@using Innkeep.Client.Ui.Modules.Pos.Components
@using Innkeep.Client.Ui.Modules.Pos.Components.Cart
@using Innkeep.Client.Ui.Modules.Pos.Components.Payment
@using Innkeep.Client.Ui.Modules.Pos.Components.Actions
@using Innkeep.Client.Ui.Modules.Pos.Components.Keypad

@inject ISalesItemService SalesItemService
@inject IClientPosService ClientPosService

<MudStack Class="flex-grow-1">
    <MudStack Row="true" Style="@TopHeightStyle" Spacing="2" Justify="Justify.SpaceBetween">
        <CartDisplay/>
        @if (ClientPosService.IsPaymentMode)
        {
            <QuickCurrencyDisplay/>
        }
        else
        {
            <SalesItemDisplay/>
        }
        <KeypadDisplay/>
    </MudStack>
    <MudStack Row="true" Style="@BottomHeightStyle" Spacing="2" Justify="Justify.SpaceBetween">
        @if (ClientPosService.IsPaymentMode)
        {
            <PaymentTotalDisplay/>
            <PosPaymentActions/>
        }
        else
        {
            <CartTotalDisplay/>
            <PosMainActions/>
        }
        
    </MudStack>
</MudStack>

@code {

    private const int TopHeight = 82;

    private static string TopHeightStyle => $"min-height: {TopHeight}% !important; height: {TopHeight}% !important; max-height: {TopHeight}% !important; width: 100%;";

    private const int BottomHeight = 17;
    
    private static string BottomHeightStyle => $"min-height: {BottomHeight}% !important; height: {BottomHeight}% !important; max-height: {BottomHeight}% !important; width: 100%;";
    
    protected override async Task OnInitializedAsync()
    {
        SalesItemService.ItemsUpdated += async (_, _) => await InvokeAsync(StateHasChanged);
        ClientPosService.PaymentStateUpdated += async (_, _) => await InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }

}