@page "/register/dashboard"
@using System.Text.Json
@using Innkeep.Api.Json
@using Innkeep.Core.FileIo
@using Innkeep.Services.Server.Interfaces.Internal
@using Innkeep.Services.Server.Interfaces.Registers
@using Innkeep.Services.Server.Interfaces.Transaction
@using Serilog
@inject ITransactionService TransactionService;
@inject ISnackbar Snackbar;
@inject NavigationManager NavManager;
@inject IEventStateService EventStateService;
@inject IRegisterService RegisterService;

<ConfigPage PageTitle="Register Overview">
    <ChildContent>
        <MudStack Class="flex-grow-1">
            <MudText>Pending Transactions: @TransactionService.PendingTransactions.Count</MudText>
            <MudGrid>
                @foreach (var register in RegisterService.KnownRegisters)
                {
                    <MudItem xs="4">
                        <MudPaper Class="flex-grow-1 cursor-pointer" @onclick="() => Navigate(register.RegisterIdentifier)">
                            <MudStack>
                                <MudPaper Class="mud-theme-primary flex-grow-1 p-2">
                                    <MudText>@register.RegisterIdentifier @register.RegisterDescription</MudText>
                                </MudPaper>
                                <MudStack Class="p-2" Row="true">
                                    <MudText>Register Cash State:</MudText>
                                    @if (CashStates.TryGetValue(register.RegisterIdentifier, out var value))
                                    {
                                        <MudText>@value @EventStateService.EventCurrency</MudText>
                                    }
                                    else
                                    {
                                        <MudText>No Transactions</MudText>
                                    }
                                </MudStack>
                            </MudStack>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    </ChildContent>
    <ActionBar>
        <MudButton Variant="Variant.Outlined" Color="Color.Success" @onclick="TrySave">Try Save Pending</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Success" @onclick="Export">Export All</MudButton>
    </ActionBar>
</ConfigPage>

@code {

    private Dictionary<string, decimal> CashStates { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cashStates = await TransactionService.GetAllCashStates();
            CashStates = cashStates;
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error while fetching transaction data");
            Snackbar.Add("Please configure a Transaction Database first.", Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void Navigate(string registerIdentifier)
    {
        NavManager.NavigateTo($"/register/transactions/{registerIdentifier}");
    }

    private async Task TrySave()
    {
        await TransactionService.SavePending();
    }

    private async Task Export()
    {
        var items = await TransactionService.GetAll();
		
        var outputFolder = PathHelper.GetDesktopExportPath();

        var outputPath = Path.Combine(outputFolder, DateTime.Now.ToString("yyyyMMdd_HHmmss") + ".json");
        
        var json = JsonSerializer.Serialize(items, SerializerOptions.GetServerOptions());
        
        await File.WriteAllTextAsync(outputPath, json);

        Snackbar.Add("Transactions Exported to Desktop", Severity.Success);
    }

}